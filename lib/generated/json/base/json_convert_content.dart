// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:blog_project/entity/article_id_entity.dart';
import 'package:blog_project/entity/article_item_entity.dart';
import 'package:blog_project/entity/iframe_channel_entity.dart';
import 'package:blog_project/entity/new1_public_info_entity.dart';
import 'package:blog_project/entity/new_user_public_info_entity.dart';
import 'package:blog_project/entity/public_info_entity.dart';
import 'package:blog_project/entity/test1_entity.dart';
import 'package:blog_project/entity/token_entity.dart';
import 'package:blog_project/generated/json/article_id_entity_helper.dart';
import 'package:blog_project/generated/json/article_item_entity_helper.dart';
import 'package:blog_project/generated/json/iframe_channel_entity_helper.dart';
import 'package:blog_project/generated/json/new1_public_info_entity_helper.dart';
import 'package:blog_project/generated/json/new_user_public_info_entity_helper.dart';
import 'package:blog_project/generated/json/public_info_entity_helper.dart';
import 'package:blog_project/generated/json/test1_entity_helper.dart';
import 'package:blog_project/generated/json/token_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case ArticleIdEntity:
				return articleIdEntityFromJson(data as ArticleIdEntity, json) as T;
			case ArticleItemEntity:
				return articleItemEntityFromJson(data as ArticleItemEntity, json) as T;
			case PublicInfoEntity:
				return publicInfoEntityFromJson(data as PublicInfoEntity, json) as T;
			case New1PublicInfoEntity:
				return new1PublicInfoEntityFromJson(data as New1PublicInfoEntity, json) as T;
			case Test1Entity:
				return test1EntityFromJson(data as Test1Entity, json) as T;
			case IFrameChannelEntity:
				return iFrameChannelEntityFromJson(data as IFrameChannelEntity, json) as T;
			case TokenEntity:
				return tokenEntityFromJson(data as TokenEntity, json) as T;
			case NewUserPublicInfoEntity:
				return newUserPublicInfoEntityFromJson(data as NewUserPublicInfoEntity, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case ArticleIdEntity:
				return articleIdEntityToJson(data as ArticleIdEntity);
			case ArticleItemEntity:
				return articleItemEntityToJson(data as ArticleItemEntity);
			case PublicInfoEntity:
				return publicInfoEntityToJson(data as PublicInfoEntity);
			case New1PublicInfoEntity:
				return new1PublicInfoEntityToJson(data as New1PublicInfoEntity);
			case Test1Entity:
				return test1EntityToJson(data as Test1Entity);
			case IFrameChannelEntity:
				return iFrameChannelEntityToJson(data as IFrameChannelEntity);
			case TokenEntity:
				return tokenEntityToJson(data as TokenEntity);
			case NewUserPublicInfoEntity:
				return newUserPublicInfoEntityToJson(data as NewUserPublicInfoEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (ArticleIdEntity).toString()){
			return ArticleIdEntity().fromJson(json);
		}	else if(type == (ArticleItemEntity).toString()){
			return ArticleItemEntity().fromJson(json);
		}	else if(type == (PublicInfoEntity).toString()){
			return PublicInfoEntity().fromJson(json);
		}	else if(type == (New1PublicInfoEntity).toString()){
			return New1PublicInfoEntity().fromJson(json);
		}	else if(type == (Test1Entity).toString()){
			return Test1Entity().fromJson(json);
		}	else if(type == (IFrameChannelEntity).toString()){
			return IFrameChannelEntity().fromJson(json);
		}	else if(type == (TokenEntity).toString()){
			return TokenEntity().fromJson(json);
		}	else if(type == (NewUserPublicInfoEntity).toString()){
			return NewUserPublicInfoEntity().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<ArticleIdEntity>[] is M){
			return data.map<ArticleIdEntity>((e) => ArticleIdEntity().fromJson(e)).toList() as M;
		}	else if(<ArticleItemEntity>[] is M){
			return data.map<ArticleItemEntity>((e) => ArticleItemEntity().fromJson(e)).toList() as M;
		}	else if(<PublicInfoEntity>[] is M){
			return data.map<PublicInfoEntity>((e) => PublicInfoEntity().fromJson(e)).toList() as M;
		}	else if(<New1PublicInfoEntity>[] is M){
			return data.map<New1PublicInfoEntity>((e) => New1PublicInfoEntity().fromJson(e)).toList() as M;
		}	else if(<Test1Entity>[] is M){
			return data.map<Test1Entity>((e) => Test1Entity().fromJson(e)).toList() as M;
		}	else if(<IFrameChannelEntity>[] is M){
			return data.map<IFrameChannelEntity>((e) => IFrameChannelEntity().fromJson(e)).toList() as M;
		}	else if(<TokenEntity>[] is M){
			return data.map<TokenEntity>((e) => TokenEntity().fromJson(e)).toList() as M;
		}	else if(<NewUserPublicInfoEntity>[] is M){
			return data.map<NewUserPublicInfoEntity>((e) => NewUserPublicInfoEntity().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}